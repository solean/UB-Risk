package code;
import java.awt.*;
import java.awt.datatransfer.*;
import java.awt.dnd.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

import javax.activation.*;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.text.*;


public class DragGUI {
	private GameDriver _gd;
	private JFrame _f;
	private DragPanel[] Art;
    private DragPanel[] Science;
    private DragPanel[] Law;
    private DragPanel[] Humanities;
    private DragPanel[] Medicine;
    private DragPanel[] Engineering;
	
	public DragGUI(){
	    _f = new JFrame();
	}
	public void updateUI(){
		MouseListener handler = new Handler();
		LabelTransferHandler th = new LabelTransferHandler(this, true);// handler for moving old students to new depts
		LabelTransferHandler th2 = new LabelTransferHandler(this, false); //handler for adding new students
	    Art = new DragPanel[4];
	    Science = new DragPanel[4];
	    Law = new DragPanel[4];
	    Humanities = new DragPanel[4];
	    Medicine = new DragPanel[4];
	    Engineering = new DragPanel[4];
	    Art[0] = new DragPanel(_gd.getGameBoard().getArts().getDepts()[0]);
    	Science[0] = new DragPanel(_gd.getGameBoard().getSciences().getDepts()[0]);
    	Law[0] = new DragPanel(_gd.getGameBoard().getLaw().getDepts()[0]);
    	Humanities[0] = new DragPanel(_gd.getGameBoard().getHumanities().getDepts()[0]);
    	Medicine[0] = new DragPanel(_gd.getGameBoard().getMedicine().getDepts()[0]);
    	Engineering[0] = new DragPanel(_gd.getGameBoard().getEngineering().getDepts()[0]);
    	Art[1] = new DragPanel(_gd.getGameBoard().getArts().getDepts()[1]);
    	Science[1] = new DragPanel(_gd.getGameBoard().getSciences().getDepts()[1]);
    	Law[1] = new DragPanel(_gd.getGameBoard().getLaw().getDepts()[1]);
    	Humanities[1] = new DragPanel(_gd.getGameBoard().getHumanities().getDepts()[1]);
    	Medicine[1] = new DragPanel(_gd.getGameBoard().getMedicine().getDepts()[1]);
    	Engineering[1] = new DragPanel(_gd.getGameBoard().getEngineering().getDepts()[1]);
    	Art[2] = new DragPanel(_gd.getGameBoard().getArts().getDepts()[2]);
    	Science[2] = new DragPanel(_gd.getGameBoard().getSciences().getDepts()[2]);
    	Law[2] = new DragPanel(_gd.getGameBoard().getLaw().getDepts()[2]);
    	Humanities[2] = new DragPanel(_gd.getGameBoard().getHumanities().getDepts()[2]);
    	Medicine[2] = new DragPanel(_gd.getGameBoard().getMedicine().getDepts()[2]);
    	Engineering[2] = new DragPanel(_gd.getGameBoard().getEngineering().getDepts()[2]);
    	Art[3] = new DragPanel(_gd.getGameBoard().getArts().getDepts()[3]);
    	Science[3] = new DragPanel(_gd.getGameBoard().getSciences().getDepts()[3]);
    	Law[3] = new DragPanel(_gd.getGameBoard().getLaw().getDepts()[3]);
    	Humanities[3] = new DragPanel(_gd.getGameBoard().getHumanities().getDepts()[3]);
    	Medicine[3] = new DragPanel(_gd.getGameBoard().getMedicine().getDepts()[3]);
    	Engineering[3] = new DragPanel(_gd.getGameBoard().getEngineering().getDepts()[3]);
	    for(int i = 0; i < 4; i++){
	    	
	    	Art[i].addMouseListener(handler);
	    	Art[i].setTransferHandler(th);
	    	Art[i].setBackground(Color.PINK);
	    	Art[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
	    	Science[i].addMouseListener(handler);
	    	Science[i].setTransferHandler(th);
	    	Science[i].setBackground(Color.GREEN);
	    	Science[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
	    	Law[i].addMouseListener(handler);
	    	Law[i].setTransferHandler(th);
	    	Law[i].setBackground(Color.ORANGE);
	    	Law[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
	    	Humanities[i].addMouseListener(handler);
	    	Humanities[i].setTransferHandler(th);
	    	Humanities[i].setBackground(Color.RED);
	    	Humanities[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
	    	Medicine[i].addMouseListener(handler);
	    	Medicine[i].setTransferHandler(th);
	    	Medicine[i].setBackground(Color.BLUE);
	    	Medicine[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
	    	Engineering[i].addMouseListener(handler);
	    	Engineering[i].setTransferHandler(th);
	    	Engineering[i].setBackground(Color.YELLOW);
	    	Engineering[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
	    }
	    
	    Art[0].add(makeHoverLabel("Music"));
	    Art[1].add(makeHoverLabel("Theatre")); 
	    Art[2].add(makeHoverLabel("Dance"));
	    Art[3].add(makeHoverLabel("Visual Arts"));
	    
	    Science[0].add(makeHoverLabel("Biology"));
	    Science[1].add(makeHoverLabel("Chemistry")); 
	    Science[2].add(makeHoverLabel("Physics"));
	    Science[3].add(makeHoverLabel("Mathematics"));
	    
	    Humanities[0].add(makeHoverLabel("History"));
	    Humanities[1].add(makeHoverLabel("Linguistics")); 
	    Humanities[2].add(makeHoverLabel("Literature"));
	    Humanities[3].add(makeHoverLabel("Religion"));
	    
	    Engineering[0].add(makeHoverLabel("Computer"));
	    Engineering[1].add(makeHoverLabel("Electrical")); 
	    Engineering[2].add(makeHoverLabel("Mechanical"));
	    Engineering[3].add(makeHoverLabel("Civil"));
	    
	    Law[0].add(makeHoverLabel("Business"));
	    Law[1].add(makeHoverLabel("Family")); 
	    Law[2].add(makeHoverLabel("Criminal"));
	    Law[3].add(makeHoverLabel("Immigration"));
	    
	    Medicine[0].add(makeHoverLabel("Anesthesia"));
	    Medicine[1].add(makeHoverLabel("Otolaryngology")); 
	    Medicine[2].add(makeHoverLabel("Pathology"));
	    Medicine[3].add(makeHoverLabel("Pediatrics"));
	    
	    for(int i = 0; i<4 ; i ++){
	    	Art[i].add(new JLabel("St x " + _gd.getCurrentPlayer().getMovableInDept(Art[i].getDept())));
	        Science[i].add(new JLabel("St x " + _gd.getCurrentPlayer().getMovableInDept(Science[i].getDept())));
	        Humanities[i].add(new JLabel("St x " + _gd.getCurrentPlayer().getMovableInDept(Humanities[i].getDept())));
	        Engineering[i].add(new JLabel("St x " + _gd.getCurrentPlayer().getMovableInDept(Engineering[i].getDept())));
	        Law[i].add(new JLabel("St x " + _gd.getCurrentPlayer().getMovableInDept(Law[i].getDept())));
	        Medicine[i].add(new JLabel("St x " + _gd.getCurrentPlayer().getMovableInDept(Medicine[i].getDept())));
	    }
	    
	    JPanel A = new JPanel();

	    A.add(setDragGUI(Art,_gd.getGameBoard().getArts()));
	    JPanel S = new JPanel();
	    
	    S.add(setDragGUI(Science,_gd.getGameBoard().getSciences()));
	    JPanel L = new JPanel();
	    
	    L.add(setDragGUI(Law,_gd.getGameBoard().getLaw()));
	    JPanel H = new JPanel();
	    
	    H.add(setDragGUI(Humanities,_gd.getGameBoard().getHumanities()));
	    JPanel M = new JPanel();
	    
	    M.add(setDragGUI(Medicine,_gd.getGameBoard().getMedicine()));
	    JPanel E = new JPanel();
	    
	    E.add(setDragGUI(Engineering,_gd.getGameBoard().getEngineering()));
	    JPanel all = new JPanel(new GridLayout(2,2));
	   //-----------------------
	    all.add(A);
	    all.add(S);
	    all.add(L);
	    all.add(H);
	    all.add(M);
	    all.add(E);
	    //-------------- this is the order in which the schools appear
	    JPanel buttonjl = new JPanel(new GridLayout(2,4));
	    DragPanel dp = new DragPanel(new Dept("drag"));
	    dp.addMouseListener(handler);
		dp.setTransferHandler(th2);
		
		
		
		JLabel pic = new JLabel();
	    pic.setIcon(new ImageIcon("images/Player Picture.png"));
	    dp.add(pic);
	    dp.validate();
	    
	    
	    
	    //-------------------------------
	    buttonjl.add(dp);
	    buttonjl.add(new JLabel("Current Player: \n" + _gd.getCurrentPlayer().getName()));
	    buttonjl.add(new JLabel("Students to place x " + _gd.getCurrentPlayer().getOnhand()));
	    JButton jb = new JButton("End Turn");
	    jb.addActionListener(new ActionListener() { 
	        public void actionPerformed(ActionEvent e) { 
	            _gd.nextTurn();
	            updateUI();
	        } 
	    });
	    
	    
	    buttonjl.add(jb);
	    
	    
	    JButton electionButton = new JButton("Call Election");
	    electionButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent e) {
	    		String dept = JOptionPane.showInputDialog("Which department would you like to call an election in?");
	    		Dept[] depts = _gd.getGameBoard().getDepts();
	    		Dept d = null;
	    		for (int i = 0; i < depts.length; i++) {
	    			if (dept.equals(depts[i].getName())) {
	    				d = depts[i];
	    			}
	    		}
	    		if (d == null) {
	    			throw new IllegalArgumentException("This is not a valid Department name");
	    		}
	    		_gd.wonElection(_gd.getCurrentPlayer(), d);
	    		updateUI();
	    	}
	    });
	    buttonjl.add(electionButton);
	    
	    all.add(buttonjl);

	    //-------------------------------- lower right hand with dragging label and button
	    
	    GridLayout g = new GridLayout();
	  
	    JPanel panel = new JPanel(g);
	    //panel.add(new JPanel());
	    panel.add(all);
	    _f.getContentPane().removeAll();
	    _f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
	    _f.getContentPane().add(panel);
	    _f.setSize(2000, 1000);
	    _f.setVisible(true);
	    
	}
	
	public Dept getDeptFromPanel(DragPanel d){
		return d.getDept();	
	}
	
	public JLabel makeHoverLabel(String s){
		JLabel temp = new JLabel(UIManager.getIcon("OptionPane.questionIcon"));
	    temp.setToolTipText("Current Student's Players: " + _gd.getCurrentPlayer().countInDept(s) + "      Everyone Else's Players: " + _gd.everyoneElsesStudents(s));
	    return temp;
	}
	
	public GameDriver getGameDriver(){
		return _gd;
	}
	
	
	public void setGameDriver(GameDriver gd){
		_gd = gd;
	}
  
  public JPanel setDragGUI(DragPanel[] d,School sc){
	  System.out.println(sc.getDepts()[0].getName());
	  GridLayout g = new GridLayout(2,6);
	  JPanel temp = new JPanel(g);
	  JLabel temp1 = new JLabel(sc.getDepts()[0].getName());
	  temp1.setToolTipText("Current Chair: " + sc.getDepts()[0].getChair().getName());
	  temp.add(temp1);
	  temp.add(d[0]);
	  temp.add(d[1]);
	  temp1 = new JLabel(sc.getDepts()[1].getName());
	  temp1.setToolTipText("Current Chair: " + sc.getDepts()[1].getChair().getName());
	  temp.add(temp1);
	  temp1 = new JLabel(sc.getDepts()[2].getName());
	  temp1.setToolTipText("Current Chair: " + sc.getDepts()[2].getChair().getName());
	  temp.add(temp1);
	  temp.add(d[2]);
	  temp.add(d[3]);
	  temp1 = new JLabel(sc.getDepts()[3].getName());
	  temp1.setToolTipText("Current Chair: " + sc.getDepts()[3].getChair().getName());
	  temp.add(temp1);
	  return temp;
  }
}

// begining of DragPanel class
class DragPanel extends JPanel {
	private Dept _dept;
  public DragPanel(Dept d) {
	_dept = d;
  }
  
  public Dept getDept(){
	  return _dept;
  }
  public JLabel draggingLabel;
}



//begining of MouseAdapter Class
class Handler extends MouseAdapter {
  @Override public void mousePressed(MouseEvent e) {
    DragPanel p = (DragPanel)e.getSource();
    Component c = SwingUtilities.getDeepestComponentAt(p, e.getX(), e.getY());
    if(c!=null && c instanceof JLabel) {
      p.draggingLabel = (JLabel)c;
      p.getTransferHandler().exportAsDrag(p, e, TransferHandler.MOVE);
    }
  }
}

//begining of LabelTransferHandler Class
class LabelTransferHandler extends TransferHandler {
  private DragGUI _g;
  private boolean _isMovable;  // represents moving students that already exist
  private final DataFlavor localObjectFlavor;
  private final JLabel label = new JLabel() {
    @Override public boolean contains(int x, int y) {
      return false;
    }
  };
  private final JWindow window = new JWindow();
  
  public boolean getIsMovable(){
	  return _isMovable;
  }
  public LabelTransferHandler(DragGUI g, boolean b) {
	 _isMovable = b;
	_g = g;
    System.out.println("LabelTransferHandler");
    localObjectFlavor = new ActivationDataFlavor(
      DragPanel.class, DataFlavor.javaJVMLocalObjectMimeType, "JLabel");
    window.add(label);
    window.setAlwaysOnTop(true);
    window.setBackground(new Color(0,true));
    DragSource.getDefaultDragSource().addDragSourceMotionListener(
    new DragSourceMotionListener() {
      @Override public void dragMouseMoved(DragSourceDragEvent dsde) {
        Point pt = dsde.getLocation();
        pt.translate(5, 5); // offset
        window.setLocation(pt);
      }
    });
  }
  @Override protected Transferable createTransferable(JComponent c) {
    System.out.println("createTransferable");
    DragPanel p = (DragPanel)c;
    JLabel l = p.draggingLabel;
    String text = l.getText();
   
    final DataHandler dh = new DataHandler(c, localObjectFlavor.getMimeType());
    if(text==null) return dh;
    final StringSelection ss = new StringSelection(text+"\n");
    return new Transferable() {
      @Override public DataFlavor[] getTransferDataFlavors() {
        ArrayList<DataFlavor> list = new ArrayList<DataFlavor>();
        for(DataFlavor f:ss.getTransferDataFlavors()) {
          list.add(f);
        }
        for(DataFlavor f:dh.getTransferDataFlavors()) {
          list.add(f);
        }
        return list.toArray(dh.getTransferDataFlavors());
      }
      public boolean isDataFlavorSupported(DataFlavor flavor) {
        for (DataFlavor f: getTransferDataFlavors()) {
          if (flavor.equals(f)) {
            return true;
          }
        }
        return false;
      }
      public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
        if(flavor.equals(localObjectFlavor)) {
          return dh.getTransferData(flavor);
        } else {
          return ss.getTransferData(flavor);
        }
      }
    };
  }
  @Override public boolean canImport(TransferSupport support) {
    if(!support.isDrop()) {
      return false;
    }
    return true;
  }
  @Override public int getSourceActions(JComponent c) {
    System.out.println("getSourceActions");
    DragPanel p = (DragPanel)c;
    label.setIcon(p.draggingLabel.getIcon());
    label.setText(p.draggingLabel.getText());
    window.pack();
    Point pt = p.draggingLabel.getLocation();
    SwingUtilities.convertPointToScreen(pt, p);
    window.setLocation(pt);
    window.setVisible(true);
    return MOVE;
  }
  @Override public boolean importData(TransferSupport support) {
    System.out.println("importData");
    if(!canImport(support)) return false;
    DragPanel target = (DragPanel)support.getComponent();
    try {
      DragPanel src = (DragPanel)support.getTransferable().getTransferData(localObjectFlavor);
      JLabel l = new JLabel();
      l.setIcon(src.draggingLabel.getIcon());
      l.setText(src.draggingLabel.getText());
      
      if(target.getDept().getPlayersStudents(_g.getGameDriver().getCurrentPlayer())>0 && getIsMovable()){
    	  // add functionality for moving to adjacent  depts here
      }
      
      
      if(_g.getGameDriver().getCurrentPlayer().getOnhand() >0 && !getIsMovable()){  // handles adding new students to selected departments
    	  _g.getGameDriver().getCurrentPlayer().removeOnHand(1);
    	  _g.getDeptFromPanel(target).addNewStudent(_g.getGameDriver().getCurrentPlayer(), target.getDept());
    	  _g.updateUI();
      }
      //target.add(l); //adds the label to the dragpanel
      target.revalidate();
      return true;
    } catch(UnsupportedFlavorException ufe) {
      ufe.printStackTrace();
    } catch(java.io.IOException ioe) {
      ioe.printStackTrace();
    }
    return false;
  }
  @Override protected void exportDone(JComponent c, Transferable data, int action) {
    // actions for adding student to new dept.
    DragPanel src = (DragPanel)c;
    if(action == TransferHandler.MOVE) {
     // src.remove(src.draggingLabel); // gets rid of original label
      src.revalidate();;
      src.repaint();
    }
    src.draggingLabel = null;
    window.setVisible(false);
  }
}